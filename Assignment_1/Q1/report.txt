I first created a 16-byte key to be used in both ECB and CBC encryptions.

$ cat part1.key
00112233445566778899aabbccddeeff

Then I created an IV to be used in CBC mode.
$ cat part1.iv
0123456789abcdeffedcba9876543210

$ openssl enc -aes-128-ecb -nosalt -K $(cat part1.key) -in original.bmp -out ecb.bmp

$ openssl enc -aes-128-cbc -nosalt -K $(cat part1.key) -iv $(cat part1.iv) -in original.bmp -out cbc.bmp

$ dd bs=1 if=bitmap_header of=ecb.bmp conv=notrunc
54+0 records in
54+0 records out
54 bytes copied, 0.000315261 s, 171 kB/s

$ dd bs=1 if=bitmap_header of=cbc.bmp conv=notrunc
54+0 records in
54+0 records out
54 bytes copied, 0.00031485 s, 172 kB/s

In ECB mode each block of plaintext (in this case image pixels) are encrypted 
independent from eachother. Since images usually have a lot of repeating pixels 
encryption with ECB mode results in the patterns being preserved in the 
ciphertext (output image), because these repeating patterns result in the same 
output (ciphertext).

To explain how the details are preserved consider the original.bmp image. It 
consists of a red ellips and a cyan rectangle on a white background. Since the
original image is a 24-bit bitmap image, using 128-bit blocksize we encode 
roughly 5 pixels per block. This means every identical ~5 pixels will result in
the same encoded ~5 pixels. Furthermore, our image has a lot of identical 5
pixel groups, in the background and inside the shapes. So when we encode the 
image the background will consist of a roughly 5 pixel pattern. Similar is valid
for the ellips and the rectangle. Only thing to consider is that the edges of 
the shapes are most likely to be distorted in the encrypted image because they
introduce some changes to the pixels. But since the blocksize is relatively 
small this doesn't prevent us from seeing the general shapes in the image.

In a more carefully crafted image (custom.bmp) we can clearly see the patterns 
emerging on the background and in the shapes themselves. Another thing to note 
about this custom image is while the edges of the square remains quite 
undistorted, the edge of the circle is really distorted. Since the image is
carefully constructed, the encryption block consists of the same number of
background pixels and square pixels on the edges of the square resulting in an
observable pattern. On the other hand, the curve of the circle's edge changes
up the ecncryption block thus distorting the edge of the circle. Custom image
is 128x128 pixels with 32-bit per pixel bmp image, so that there is the same
number of encryption blocks on each row of the image and no block that splits
up a pixel's values.

In the CBC mode each block of plaintext is xor'ed with the previous block's
ciphertext before being encrypted. Since the plaintext in each block is xored
with the previous block's ciphertext, even if we encrypt two identical blocks
back to back we get different outputs. This solves the diffusion problem in the 
ECB mode, in which the output displays the patterns from the original image. In 
CBC each block again consists of ~5 pixels, but this time output of the same 
5 pixel values are different as they are xored with the result of previous 
5 pixel's values. Encrypted image 'looks like' the pixel values are randomly 
generated, and there is no immediately appearent pattern.
